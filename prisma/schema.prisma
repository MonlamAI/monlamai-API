generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    Admin
    User
    Subscriber
}
enum Gender{
    Male
    Female
    Other
}

model User {
    id            Int      @id @default(autoincrement())
    username      String
    email         String   @unique
    picture       String?
    role          UserRole @default(User)
    createdAt     DateTime @default(now())
    profession    String?
    interest      String?
    birth_date    DateTime?
    gender        Gender?   
    city          String?
    country       String?
    translations  Translation[]   @relation("UserTranslations")
    speechToTexts SpeechToTexts[] @relation("UserSpeechToTexts")
    textToSpeechs TextToSpeech[]  @relation("UserTextToSpeechs")
    ocrs          OCR[]           @relation("UserOCRs")
    threads     Thread[]  @relation("UserThreads")
    chats       Chat[]    @relation("UserChats")
}

model WaitList {
    id        Int      @id @default(autoincrement())
    name      String
    email     String   @unique
    createdAt DateTime @default(now())
    active    Boolean  @default(false)
}

model Translation {
    id           String   @id @default(uuid())
    input        String
    output       String
    inputLang    String?
    outputLang   String?
    responseTime String?
    ipAddress    String?
    version      String?
    sourceApp    String?
    createdAt    DateTime @default(now())
    city         String?
    country      String?
    editOutput   String?

    user   User? @relation("UserTranslations", fields: [userId], references: [id])
    userId Int?

    liked_count    Int @default(0)
    disliked_count Int @default(0)
}

model SpeechToTexts {
    id           Int      @id @default(autoincrement())
    input        String
    output       String
    responseTime String?
    ipAddress    String?
    version      String?
    sourceApp    String?
    createdAt    DateTime @default(now())
    city         String?
    country      String?
    editOutput   String?

    user   User? @relation("UserSpeechToTexts", fields: [userId], references: [id])
    userId Int?

    liked_count    Int @default(0)
    disliked_count Int @default(0)
}

model TextToSpeech {
    id           Int      @id @default(autoincrement())
    input        String
    output       String
    responseTime String?
    ipAddress    String?
    version      String?
    sourceApp    String?
    createdAt    DateTime @default(now())
    city         String?
    country      String?

    user           User? @relation("UserTextToSpeechs", fields: [userId], references: [id])
    userId         Int?
    liked_count    Int   @default(0)
    disliked_count Int   @default(0)
}

model OCR {
    id           Int      @id @default(autoincrement())
    input        String
    output       String
    responseTime String?
    ipAddress    String?
    version      String?
    sourceApp    String?
    createdAt    DateTime @default(now())
    city         String?
    country      String?
    editOutput   String?

    user   User? @relation("UserOCRs", fields: [userId], references: [id])
    userId Int?

    liked_count    Int @default(0)
    disliked_count Int @default(0)
}

model Thread {
  id          String       @id @default(uuid())
  title       String
  createdBy   User      @relation("UserThreads", fields: [createdById], references: [id])
  createdById Int
  chats       Chat[]    @relation("ThreadChats")
  show        Boolean   @default(true)
  is_completed    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Chat {
  id          Int       @id @default(autoincrement())
  input       String
  output      String
  thread      Thread    @relation("ThreadChats", fields: [threadId], references: [id])
  threadId    String
  sender      User      @relation("UserChats", fields: [senderId], references: [id])
  senderId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  liked_count    Int @default(0)
  disliked_count Int @default(0)
  model          String
  latency        Int
  token          String?
  edit_input     String?
  edit_output    String?
}